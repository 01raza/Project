hi
install.packages("swirl")
library(swirl)
swril()
install.packages("swirl")
library(swirl)
swirl(output:1,2)
swirl(1,2,3)
install.packages("swirl")
library(swirl)
library(swirl)
swirl()
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
data(cars)
help.search()
library(swirl)
swirl()
getwd()
1s()
1s()
ls()
x<-9
ls()
dir()
?list.files
args(list.files())
args(list.files)
getwd()<-"old.dir"
old.dir<-getwd()
dir.create(testdir)
dir.create()
args(dir.create)
dir.create("testdir")
setwd()
setwd("testdir")
file.create("mytest.R")
getwd()
ls()
list.files()
file.exists()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R" to "mytest2.R")
arug(file.rename)
args(file.rename)
file.rename("mytest.R","mytest2.R")
info(file.copy)
info(file.copy())
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("folder1","folder2")
dir.create
?dir.create
dir.create("testdir2") file.path("testdir3")
dir.create("testdir2") file.path("testdir3")
dir.create("testdir2") file.path("testdir3")
dir.create("testdir2") file.path("testdir3")
dir.create("testdir2"),file.path("testdir3")
dir.create("testdir2") and file.path("testdir3")
dir.create("testdir2")
dir.create(file.path('testdir2', 'testdir3')
info()
dir.create(file.path('testdir2', 'testdir3')
testdir2
dir.create(file.path('testdir2', 'testdir3')
folder1
dir.create(file.path('testdir2', 'testdir3')
mk
dir.create(file.path('testdir2', 'testdir3')
dir.create(file.path("testdir2","testdir3")
dir.create(file.path("testdir2","testdir3")
info(dir.create)
info(dir.create)
dir.create(file.path("testdir2","testdir3")
jjijo
dir.create(file.path("testdir2","testdir3"))
dir.create(file.path("testdir2","testdir3", recursive=true))
dir.create(file.path("testdir2","testdir3", recursive=TRUE))
dir.create(file.path("testdir2","testdir3", recursive=TRUE))
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
setwd
setwd(old.dir)
2
library(swirl)
swirl()
2
getwd()
ls()
x<-9
ls()
dir()
?list.files
args(list.files)
old.dir<-getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.remove("mytest.R")
file.remove("mytest.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
setwd(old.dir)
2
print("s3j")
library(swirl)
swirl()
play()
5 %% 4
6 %% 3
3 %% 1
57%%7
nxt()
remainder <- function(num, divisor) {
ans<-num %% divisor
return(ans)
}
submit()
remainder <- function(num, divisor) {
divisor<-2
ans<-num %% divisor
return(ans)
}
submit()
remainder <- function(num, divisor = 2) {
num %% divisor
}
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
evaluate <- function(func, dat){
func (dat)
}
submit()
evaluate(c(1.4,3.6,7.9,8.8))
evaluate(func(c(1.4,3.6,7.9,8.8)))
some_function <- function(func){
func(2, 4)
}
evaluate(sd(c(1.4,3.6,7.9,8.8)))
evaluate(cd,c(1.4,3.6,7.9,8.8)
)
evaluate(cd,c(1.4,3.6,7.9,8.8))
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6)
evaluate(x,c(8,4,0))
evaluate(function(x),c(8,4,0))
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[3]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
paste()
?paste
paste("Programming", "is", "fun!")
telegram <- function(...){
paste(START,...,STOP)
}
SUBMIT()
submit()
telegram <- function(...){
paste("START",...,"STOP")
}
submit()
telegram <- function(...){
paste("START",...,"STOP")
}
submit()
telegram("mid")
mad_libs <- function(...){
args <- list(...)
place <- args[["place"]]
adjective <- args[["adjective"]]
noun <- args[["noun"]]
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
mad_libs(place=beckley,adjective=smart,noun=he)
mad_libs(place="beckley",adjective="smart",noun="he")
%p% <- function(x,y){
paste("x"", "right")
}
%p% <- function(x,y){
paste("x"", "y")
}
"%p%" <- function(left, right){
paste(left, right)
}
submit()
"%p%"("I","love","R")
%p%("I","love","R!")
"%p%"("I","love","R!")
"%p%"("I","love R!")
"%p%"("I","love")"%p%"("love", "R!")
"%p%"("I","%p%"("love", "R!"))
"'I' %p% 'love' %p% 'R!'"
'I' %p% 'love' %p% 'R!'
data(cars)
help
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(dist ~ speed, cars)
plot(x = cars$dist, y = cars$speed)
plot(dist ~ speed, cars)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance", main = "myplot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(col=2, cars)
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
?points
plot(cars, pch=2)
data(mtcars)
play()
dim(mtcars)
head(mtcars)
nxt()
?boxplot
boxplot(mpg~cyl,mtcars)
hist(mtcars$mpg)
library("ape")
library("maps")
library("phytools")
library("coala")
model <- coala::coal_model (sample_size = 5, loci_number = 10, loci_length = 500, ploidy = 2) +
coala::feat_mutation (10) +
coala::feat_recombination (10) +
coala::sumstat_trees() +
coala::sumstat_nucleotide_div ()
model
stats <- simulate (model, nsim = 1)
Diversity <- stats$pi
Diversity
### The numbers are not same, different due to recombination and mutation.
Nloci <- length (stats$trees)
Nloci
t1 <- read.tree(text=stats$trees [[1]][1])
plot (t1)
axisPhylo ()
### 6. Effective population size changes with its environment.Also the individuals in the population are born and dying.
Agel <- max (node.height(t1))
Agel
t2 <- read.tree (text=stats$trees [[2]][1])
plot (t2)
axisPhylo()
plot (t1_1)
axisPhylo()
plot (t1_2)
axisPhylo()
t1_1 <- read.tree (text=stats$trees [[1]][1])
t1_2 <- read.tree (text=stats$trees [[1]][2])
par (mfrow=c(1,2))
plot (t1_1)
axisPhylo()
plot (t1_2)
axisPhylo()
?coal_model
vignette(coala-intro)
vignette(coala-intro, coala)
vignette("coala-intro", coala)
comparePhylo(t1_1, t1_2)
library("ape")
library("maps")
library("phytools")
library("coala")
model <- coala::coal_model (sample_size = 5, loci_number = 10, loci_length = 500, ploidy = 2) +
coala::feat_mutation (10) +
coala::feat_recombination (10) +
coala::sumstat_trees() +
coala::sumstat_nucleotide_div ()
model
stats <- simulate (model, nsim = 1)
Diversity <- stats$pi
Diversity
### The numbers are not same, different due to recombination and mutation.
Nloci <- length (stats$trees)
Nloci
t1 <- read.tree(text=stats$trees [[1]][1])
plot (t1)
axisPhylo ()
### 6. Effective population size changes with its environment.Also the individuals in the population are born and dying.
Agel <- max (node.height(t1))
Agel
t2 <- read.tree (text=stats$trees [[2]][1])
plot (t2)
axisPhylo()
###
par (mfrow=c(1,2))
plot (t1)
axisPhylo()
plot (t2)
axisPhylo()
# The plots do not match.
comparePhylo(t1, t2)
t1_1 <- read.tree (text=stats$trees [[1]][1])
t1_2 <- read.tree (text=stats$trees [[1]][2])
par (mfrow=c(1,2))
plot (t1_1)
axisPhylo()
plot (t1_2)
axisPhylo()
comparePhylo(t1_1, t1_2)
t1_1
t1_2
comparePhylo(t1_1, t1_2)
plot(comparePhylo(t1_1, t1_2))
?comparePhylo
for (locus in 1:Nloci) {
ntrees <- length (stats$trees [[locus]])
for (n in 1:ntrees) {
if (locus == 1 && n == 1) {
outPhy <- read.tree (text=stats$trees [[locus]][n])
}
else {
outPhy <- ape:::c.phylo(outPhy, read.tree (text=stats$trees [[locus]][n]))
}
}
}
par (mfrow=c(1,1))
phytools::densityTree(outPhy)
for (locus in 1:Nloci) {
ntrees <- length (stats$trees [[locus]])
for (n in 1:ntrees) {
if (locus == 1 && n == 1) {
outPhy <- read.tree (text=stats$trees [[locus]][n])
}
else {
outPhy <- ape:::c.multiPhylo (outPhy, read.tree (text=stats$trees [[locus]][n]))
}
}
}
par (mfrow=c(1,1))
phytools::densityTree(outPhy)
model <- coala::coal_model (sample_size = 5, loci_number = 10, loci_length = 500, ploidy = 2) +
coala::feat_mutation (10) +
coala::feat_recombination (10) +
coala::sumstat_trees() +
coala::sumstat_nucleotide_div ()
model
stats <- simulate (model, nsim = 1)
stats
t1_1 <- read.tree (text=stats$trees [[1]][1])
t1_2 <- read.tree (text=stats$trees [[1]][2])
par (mfrow=c(1,2))
plot (t1_1)
axisPhylo()
plot (t1_2)
axisPhylo()
comparePhylo(t1_1, t1_2)
par (mfrow=c(1,1))
phytools::densityTree(outPhy)
for (locus in 1:Nloci) {
ntrees <- length (stats$trees [[locus]])
for (n in 1:ntrees) {
if (locus == 1 && n == 1) {
outPhy <- read.tree (text=stats$trees [[locus]][n])
}
else {
outPhy <- ape:::c.multiPhylo (outPhy, read.tree (text=stats$trees [[locus]][n]))
}
}
}
par (mfrow=c(1,1))
phytools::densityTree(outPhy)
for (locus in 1:Nloci) {
ntrees <- length (stats$trees [[locus]])
for (n in 1:ntrees) {
if (locus == 1 && n == 1) {
outPhy <- read.tree (text=stats$trees [[locus]][n])
}
else {
outPhy <- ape:::c.phylo(outPhy, read.tree (text=stats$trees [[locus]][n]))
}
}
}
par (mfrow=c(1,1))
phytools::densityTree(outPhy)
for (locus in 1:Nloci) {
ntrees <- length (stats$trees [[locus]])
for (n in 1:ntrees) {
if (locus == 1 && n == 1) {
outPhy <- read.tree (text=stats$trees [[locus]][n])
}
else {
outPhy <- ape:::c.multiPhylo (outPhy, read.tree (text=stats$trees [[locus]][n]))
}
}
}
model3 <- coala::coal_model(10, 50)
coala::feat_mutation(coala::par_prior("theta", sample.init(100, 1))) + coala::sumstat_nucleotide_div()
stats <- simulate (model3, nsim = 0)
mean_pi <- sapply (stats, function (x) mean (x$pi))
theta <- sapply (stats, function (x) x$pars [["theta"]])
theta
mean_pi
library(learnPopGen)
?coalescent.plot
?coalescent.plot
coalescent.plot(n=20, ngen=20, colors=NULL)
coalescent.plot(n=10, ngen=20, colors=NULL)
coalescent.plot(n=10, ngen=40, colors=NULL)
coalescent.plot(n=5, ngen=10, colors=NULL)
coalescent.plot(n=5, ngen=30, colors=NULL)
coalescent.plot(n=15, ngen=20, colors=NULL)
coalescent.plot(n=15, ngen=20, colors=NULL)
coalescent.plot(n=3, ngen=20, colors=NULL)
coalescent.plot(n=3, ngen=20, colors=NULL)
coalescent.plot(n=7, ngen=20, colors=NULL)
setwd('~/Desktop/Evolution/Tasks/Task_05')
library(learnPopGen)
?coalescent.plot
Dataset <- read.csv('~/Desktop/Evolution/Project/pelvic_size_data.csv', stringsAsFactors=F)
setwd('C:\\Users\\Raza\\Desktop\\Evolution\\Project\\Project\\')
Data <- read.csv('pelvic_size_data.csv', stringsAsFactors=F)
Sum(dnorm(40:55,30.5,6.7))
sum(dnorm(40:55,30.5,6.7))
test<-simPop(nGenerations=21,h=0,s=1)
library(learnPopGen)
test<-simPop(nGenerations=21,h=0,s=1)
library(learnPopGen)
test<-simPop(nGenerations=21,h=0,s=1)
test<-simPop(popsize=177,nGenerations=21,h=0,s=1)
install.packages("learnPopGen")
install.packages("learnPopGen")
learnPopGen
library(learnPopGen)
test<-simPop(popsize=177,nGenerations=21,h=0,s=1)
plotFit(nruns=3, n=50,ngens=21,init_p=0.5,h=0,s=1)
source("http://jonsmitchell.com/code/fxn05.R")
test<-simPop(popsize=177,nGenerations=21,h=0,s=1)
test<-simPop(nGenerations=21,h=0,s=1)
test
plotFit(nruns=3, n=50,ngens=21,init_p=0.5,h=0,s=1)
plotFit(nruns=4, n=50,ngens=21,init_p=0.5,h=0,s=1)
plotFit(nruns=3, n=50,ngens=21,init_p=0.5,h=0,s=1)
plotFit(nruns=3, n=177,ngens=21,h=0,s=1)
test<-simPop(nGenerations=21,h=0,s=1)
111.2*21
setwd('C:\\Users\\Raza\\Desktop\\Evolution\\Project\\Data')
dir()
dir()
dir()
data<- read.csv("brain.csv",stringsAsFactors=F)
head(data)
